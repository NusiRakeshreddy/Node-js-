const express = require("express");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const path = require("path");

const databasePath = path.join(__dirname, "todoApplication.db");

const app = express();
app.use(express.json());

let database = null;

const initializeDbAndServer = async () => {
  try {
    database = await open({
      filename: databasePath,
      driver: sqlite3.Database,
    });

    app.listen(3000, () =>
      console.log("Server Running at http://localhost:3000/")
    );
  } catch (error) {
    console.error(`DB Error: ${error.message}`);
    process.exit(1);
  }
};

initializeDbAndServer();

// Utility functions for query conditions
const hasPriorityAndStatusProperties = (query) =>
  query.priority !== undefined && query.status !== undefined;
const hasPriorityProperty = (query) => query.priority !== undefined;
const hasStatusProperty = (query) => query.status !== undefined;

// GET /todos/
app.get("/todos/", async (request, response) => {
  try {
    const { search_q = "", priority, status } = request.query;
    let getTodosQuery = `SELECT * FROM todo WHERE todo LIKE ?`;
    const queryParams = [`%${search_q}%`];

    if (hasPriorityAndStatusProperties(request.query)) {
      getTodosQuery += ` AND priority = ? AND status = ?`;
      queryParams.push(priority, status);
    } else if (hasPriorityProperty(request.query)) {
      getTodosQuery += ` AND priority = ?`;
      queryParams.push(priority);
    } else if (hasStatusProperty(request.query)) {
      getTodosQuery += ` AND status = ?`;
      queryParams.push(status);
    }

    const todos = await database.all(getTodosQuery, queryParams);
    response.json(todos);
  } catch (error) {
    response.status(500).json({ error: "Internal Server Error" });
  }
});

// GET /todos/:todoId/
app.get("/todos/:todoId/", async (request, response) => {
  try {
    const { todoId } = request.params;
    const getTodoQuery = `SELECT * FROM todo WHERE id = ?`;
    const todo = await database.get(getTodoQuery, [todoId]);

    if (todo) {
      response.json(todo);
    } else {
      response.status(404).json({ error: "Todo Not Found" });
    }
  } catch (error) {
    response.status(500).json({ error: "Internal Server Error" });
  }
});

// POST /todos/
app.post("/todos/", async (request, response) => {
  try {
    const { id, todo, priority, status } = request.body;

    if (!todo || !priority || !status) {
      return response.status(400).json({ error: "Missing required fields" });
    }

    const postTodoQuery = `
      INSERT INTO todo (id, todo, priority, status)
      VALUES (?, ?, ?, ?)
    `;
    await database.run(postTodoQuery, [id, todo, priority, status]);
    response.status(201).json({ message: "Todo Successfully Added" });
  } catch (error) {
    response.status(500).json({ error: "Internal Server Error" });
  }
});

// PUT /todos/:todoId/
app.put("/todos/:todoId/", async (request, response) => {
  try {
    const { todoId } = request.params;
    const { todo, priority, status } = request.body;

    const previousTodoQuery = `SELECT * FROM todo WHERE id = ?`;
    const previousTodo = await database.get(previousTodoQuery, [todoId]);

    if (!previousTodo) {
      return response.status(404).json({ error: "Todo Not Found" });
    }

    const updatedTodo = {
      todo: todo || previousTodo.todo,
      priority: priority || previousTodo.priority,
      status: status || previousTodo.status,
    };

    const updateTodoQuery = `
      UPDATE todo 
      SET todo = ?, priority = ?, status = ?
      WHERE id = ?
    `;
    await database.run(updateTodoQuery, [
      updatedTodo.todo,
      updatedTodo.priority,
      updatedTodo.status,
      todoId,
    ]);

    response.json({ message: "Todo Updated", updatedTodo });
  } catch (error) {
    response.status(500).json({ error: "Internal Server Error" });
  }
});

// DELETE /todos/:todoId/
app.delete("/todos/:todoId/", async (request, response) => {
  try {
    const { todoId } = request.params;
    const deleteTodoQuery = `DELETE FROM todo WHERE id = ?`;
    const result = await database.run(deleteTodoQuery, [todoId]);

    if (result.changes === 0) {
      return response.status(404).json({ error: "Todo Not Found" });
    }

    response.json({ message: "Todo Deleted" });
  } catch (error) {
    response.status(500).json({ error: "Internal Server Error" });
  }
});

module.exports = app;
